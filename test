sudo dnf install python39 python39-devel -y
sudo dnf install python39-pip -y
python3.9 -m pip install --upgrade pip
python3.9 -m pip install virtualenv

sudo dnf install mod_wsgi -y
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload

sudo mkdir -p /var/www/web4_amplitude/templates
sudo chown -R $USER:$USER /var/www/web4_amplitude  # 권한 부여
cd /var/www/web4_amplitude

pip install flask numpy

<VirtualHost *:80>
    ServerName web4.example.com
    WSGIDaemonProcess web4_amplitude python-path=/path/to/web4_amplitude
    WSGIScriptAlias / /path/to/web4_amplitude/web4_amplitude.wsgi

    <Directory /path/to/web4_amplitude>
        WSGIProcessGroup web4_amplitude
        WSGIApplicationGroup %{GLOBAL}
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/web4_amplitude_error.log
    CustomLog ${APACHE_LOG_DIR}/web4_amplitude_access.log combined
</VirtualHost>




import sys
import os

sys.path.insert(0, '/path/to/web4_amplitude')
from amplitude_node import app as application



import numpy as np
import re
from flask import Flask, request, Response, render_template_string
from concurrent.futures import ThreadPoolExecutor

# 진폭 기반 Web4 노드 클래스
class AmplitudeWebNode:
    def __init__(self, node_id):
        self.node_id = node_id
        self.token_to_id = {}
        self.id_to_token = {}
        self.pages = {}

    def tokenize(self, html):
        # 간단한 토큰화 (공백 기준 + 태그 및 속성 유지)
        tokens = re.findall(r"<[^>]+>|[^<\s]+", html)
        return tokens

    def store_page(self, page_id, html):
        tokens = self.tokenize(html)
        unique_tokens = set(tokens)
        for token in unique_tokens:
            if token not in self.token_to_id:
                token_id = len(self.token_to_id) + 1
                self.token_to_id[token] = token_id
                self.id_to_token[token_id] = token

        ids = [self.token_to_id[token] for token in tokens]
        norm = np.sqrt(sum(i ** 2 for i in ids))
        amplitudes = [i / norm for i in ids]
        self.pages[page_id] = (amplitudes, norm)

    def reconstruct_html(self, page_id):
        amplitudes, norm = self.pages[page_id]
        ids = [round(a * norm) for a in amplitudes]
        tokens = [self.id_to_token[i] for i in ids]
        html = "".join(tokens)
        return html

# 다수 노드 구성
nodes = [AmplitudeWebNode(i) for i in range(3)]

# 3개 페이지 생성 (구글, 네이버, 아마존 스타일)
google_html = """
<!doctype html>
<html>
<head>
    <title>Google</title>
    <style>
        body { font-family: Arial, sans-serif; text-align: center; margin-top: 100px; }
        .search-box { width: 500px; padding: 10px; border-radius: 24px; border: 1px solid #dfe1e5; }
        .search-button { background-color: #f8f9fa; border: 1px solid #f8f9fa; padding: 8px 16px; margin: 11px 4px; }
        .logo { margin-bottom: 20px; }
    </style>
</head>
<body>
    <div class="logo">
        <span style="color: #4285F4;">G</span>
        <span style="color: #EA4335;">o</span>
        <span style="color: #FBBC05;">o</span>
        <span style="color: #4285F4;">g</span>
        <span style="color: #34A853;">l</span>
        <span style="color: #EA4335;">e</span>
    </div>
    <input type="text" class="search-box">
    <div>
        <button class="search-button">Google Search</button>
        <button class="search-button">I'm Feeling Lucky</button>
    </div>
</body>
</html>
"""

naver_html = """
<!doctype html>
<html>
<head>
    <title>Naver</title>
    <style>
        body { font-family: 'Nanum Gothic', sans-serif; text-align: center; margin-top: 50px; }
        .search-box { width: 500px; padding: 15px; border: 2px solid #03C75A; }
        .search-button { background-color: #03C75A; color: white; border: none; padding: 15px 20px; }
        .logo { margin-bottom: 20px; color: #03C75A; font-size: 40px; font-weight: bold; }
        .nav { margin-top: 20px; }
    </style>
</head>
<body>
    <div class="logo">NAVER</div>
    <input type="text" class="search-box">
    <button class="search-button">검색</button>
    <div class="nav">
        <a href="#">메일</a> | 
        <a href="#">카페</a> | 
        <a href="#">블로그</a> | 
        <a href="#">지식iN</a>
    </div>
</body>
</html>
"""

amazon_html = """
<!doctype html>
<html>
<head>
    <title>Amazon</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 0; }
        .header { background-color: #232F3E; padding: 10px; color: white; }
        .logo { color: white; font-size: 24px; font-weight: bold; }
        .search-box { width: 80%; padding: 10px; }
        .search-button { background-color: #F3A847; border: none; padding: 10px; }
        .products { display: flex; flex-wrap: wrap; justify-content: center; }
        .product { width: 200px; margin: 10px; padding: 10px; border: 1px solid #DDD; }
    </style>
</head>
<body>
    <div class="header">
        <span class="logo">Amazon</span>
    </div>
    <div style="text-align: center; padding: 20px;">
        <input type="text" class="search-box" placeholder="Search Amazon">
        <button class="search-button">Search</button>
    </div>
    <div class="products">
        <div class="product">Product 1</div>
        <div class="product">Product 2</div>
        <div class="product">Product 3</div>
    </div>
</body>
</html>
"""

# 각 노드에 페이지 분산저장
sample_pages = {
    "google": google_html,
    "naver": naver_html,
    "amazon": amazon_html
}

for key, html in sample_pages.items():
    idx = sum(ord(c) for c in key) % len(nodes)
    nodes[idx].store_page(key, html)

# Flask 웹 서버
app = Flask(__name__)
thread_pool = ThreadPoolExecutor()

def find_node_for_query(query, nodes):
    idx = sum(ord(c) for c in query) % len(nodes)
    return nodes[idx]

@app.route('/')
def home():
    home_template = """
    <!doctype html>
    <html>
    <head>
        <title>Web4 Amplitude Server</title>
        <style>
            body { font-family: Arial, sans-serif; text-align: center; margin-top: 50px; }
            ul { list-style-type: none; padding: 0; }
            li { margin: 10px; }
            a { text-decoration: none; color: #0066cc; font-size: 18px; }
        </style>
    </head>
    <body>
        <h1>Web4 Amplitude Server</h1>
        <ul>
            <li><a href="/query?q=google">Go to Google</a></li>
            <li><a href="/query?q=naver">Go to Naver</a></li>
            <li><a href="/query?q=amazon">Go to Amazon</a></li>
        </ul>
    </body>
    </html>
    """
    return render_template_string(home_template)

@app.route('/query')
def query():
    keyword = request.args.get('q', '')
    node = find_node_for_query(keyword, nodes)

    def process_request():
        if keyword in node.pages:
            html = node.reconstruct_html(keyword)
            return Response(html, mimetype='text/html')
        else:
            return f"<h3>Page '{keyword}' not found on Node {node.node_id}</h3>", 404

    future = thread_pool.submit(process_request)
    return future.result()

if __name__ == '__main__':
    app.run(debug=True)


sudo cp web4_amplitude.conf /etc/apache2/sites-available/
sudo a2ensite web4_amplitude.conf
sudo systemctl restart apache2



